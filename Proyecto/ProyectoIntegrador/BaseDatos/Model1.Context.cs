//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoIntegrador.BaseDatos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Gr03Proy2Entities6 : DbContext
    {
        public Gr03Proy2Entities6()
            : base("name=Gr03Proy2Entities6")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<HabilidadBlanda> HabilidadBlanda { get; set; }
        public virtual DbSet<HabilidadTecnica> HabilidadTecnica { get; set; }
        public virtual DbSet<Proyecto> Proyecto { get; set; }
        public virtual DbSet<Requerimiento> Requerimiento { get; set; }
        public virtual DbSet<Tester> Tester { get; set; }
        public virtual DbSet<TrabajaEn> TrabajaEn { get; set; }
        public virtual DbSet<HistorialReqTester> HistorialReqTester { get; set; }
        public virtual DbSet<Prueba> Prueba { get; set; }
        public virtual DbSet<SeguridadProyectoGeneral> SeguridadProyectoGeneral { get; set; }
        public virtual DbSet<SeguridadClientesGeneral> SeguridadClientesGeneral { get; set; }
        public virtual DbSet<SeguridadEmpleadosGeneral> SeguridadEmpleadosGeneral { get; set; }
        public virtual DbSet<SeguridadRequerimientosGeneral> SeguridadRequerimientosGeneral { get; set; }
        public virtual DbSet<SeguridadEquipoGeneral> SeguridadEquipoGeneral { get; set; }
        public virtual DbSet<SeguridadPruebasGeneral> SeguridadPruebasGeneral { get; set; }
        public virtual DbSet<SeguridadProyectoEditar> SeguridadProyectoEditar { get; set; }
        public virtual DbSet<SeguridadProyectoAgregar> SeguridadProyectoAgregar { get; set; }
    
        public virtual ObjectResult<CA_TestersAsignadosDisponibles_Result> CA_TestersAsignadosDisponibles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CA_TestersAsignadosDisponibles_Result>("CA_TestersAsignadosDisponibles");
        }
    
        public virtual ObjectResult<CA_TestersAsignados_Y_Disponibles_Result> CA_TestersAsignados_Y_Disponibles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CA_TestersAsignados_Y_Disponibles_Result>("CA_TestersAsignados_Y_Disponibles");
        }
    
        public virtual ObjectResult<numeroEmpleados_Result> numeroEmpleados(ObjectParameter numeroEmpleados)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<numeroEmpleados_Result>("numeroEmpleados", numeroEmpleados);
        }
    
        public virtual ObjectResult<testers_Result> testers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<testers_Result>("testers");
        }
    
        public virtual ObjectResult<testersActivos_Result> testersActivos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<testersActivos_Result>("testersActivos");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<TestersAsignables_Result> TestersAsignables(Nullable<int> idProyecto)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestersAsignables_Result>("TestersAsignables", idProyectoParameter);
        }
    
        public virtual ObjectResult<string> HabilidadesEmpleado(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("HabilidadesEmpleado", idParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int USP_editEmployeeId(string cedulaVieja, string cedulaNueva)
        {
            var cedulaViejaParameter = cedulaVieja != null ?
                new ObjectParameter("cedulaVieja", cedulaVieja) :
                new ObjectParameter("cedulaVieja", typeof(string));
    
            var cedulaNuevaParameter = cedulaNueva != null ?
                new ObjectParameter("cedulaNueva", cedulaNueva) :
                new ObjectParameter("cedulaNueva", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_editEmployeeId", cedulaViejaParameter, cedulaNuevaParameter);
        }
    
        public virtual int USP_EquipoCheckLider(Nullable<int> idProyecto, ObjectParameter liderFlag)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_EquipoCheckLider", idProyectoParameter, liderFlag);
        }
    
        public virtual int USP_EquipoCheckTesters(Nullable<int> idProyecto, ObjectParameter testers)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_EquipoCheckTesters", idProyectoParameter, testers);
        }
    
        public virtual ObjectResult<USP_GetEquipo_Result> USP_GetEquipo(Nullable<int> id_proyecto)
        {
            var id_proyectoParameter = id_proyecto.HasValue ?
                new ObjectParameter("id_proyecto", id_proyecto) :
                new ObjectParameter("id_proyecto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetEquipo_Result>("USP_GetEquipo", id_proyectoParameter);
        }
    
        public virtual ObjectResult<USP_GetLideresDisponibles_Result> USP_GetLideresDisponibles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetLideresDisponibles_Result>("USP_GetLideresDisponibles");
        }
    
        public virtual ObjectResult<USP_GetTestersDisponibles_Result> USP_GetTestersDisponibles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetTestersDisponibles_Result>("USP_GetTestersDisponibles");
        }
    
        public virtual ObjectResult<USP_TestersDisponibleAsignado_Result> USP_TestersDisponibleAsignado()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_TestersDisponibleAsignado_Result>("USP_TestersDisponibleAsignado");
        }
    
        public virtual int USP_ContarRequerimientosTester(string idTester, ObjectParameter reqs)
        {
            var idTesterParameter = idTester != null ?
                new ObjectParameter("idTester", idTester) :
                new ObjectParameter("idTester", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ContarRequerimientosTester", idTesterParameter, reqs);
        }
    
        public virtual int sp_cambiar_cedulaCliente(string cedulaVieja, string cedulaNueva)
        {
            var cedulaViejaParameter = cedulaVieja != null ?
                new ObjectParameter("cedulaVieja", cedulaVieja) :
                new ObjectParameter("cedulaVieja", typeof(string));
    
            var cedulaNuevaParameter = cedulaNueva != null ?
                new ObjectParameter("cedulaNueva", cedulaNueva) :
                new ObjectParameter("cedulaNueva", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_cambiar_cedulaCliente", cedulaViejaParameter, cedulaNuevaParameter);
        }
    
        public virtual ObjectResult<string> nombreTester(Nullable<int> idProyecto)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("nombreTester", idProyectoParameter);
        }
    
        public virtual ObjectResult<USP_GetEmpleadosDeLider_Result> USP_GetEmpleadosDeLider(string cedulaLider)
        {
            var cedulaLiderParameter = cedulaLider != null ?
                new ObjectParameter("cedulaLider", cedulaLider) :
                new ObjectParameter("cedulaLider", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetEmpleadosDeLider_Result>("USP_GetEmpleadosDeLider", cedulaLiderParameter);
        }
    
        public virtual ObjectResult<string> USP_GetTestersPorHabilidades(string habilidades)
        {
            var habilidadesParameter = habilidades != null ?
                new ObjectParameter("habilidades", habilidades) :
                new ObjectParameter("habilidades", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetTestersPorHabilidades", habilidadesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_obtenerEdad(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_obtenerEdad", idParameter);
        }
    
        public virtual ObjectResult<USP_DuracionReqTester_Result> USP_DuracionReqTester(Nullable<int> idProyecto, string idTester)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            var idTesterParameter = idTester != null ?
                new ObjectParameter("idTester", idTester) :
                new ObjectParameter("idTester", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DuracionReqTester_Result>("USP_DuracionReqTester", idProyectoParameter, idTesterParameter);
        }
    
        public virtual ObjectResult<USP_CantidadReqATester_Result> USP_CantidadReqATester(Nullable<int> idProyecto)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CantidadReqATester_Result>("USP_CantidadReqATester", idProyectoParameter);
        }
    
        public virtual ObjectResult<USP_DuracionesProyecto_Result> USP_DuracionesProyecto(Nullable<int> permiso, Nullable<int> rol, string idUsuario)
        {
            var permisoParameter = permiso.HasValue ?
                new ObjectParameter("permiso", permiso) :
                new ObjectParameter("permiso", typeof(int));
    
            var rolParameter = rol.HasValue ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(int));
    
            var idUsuarioParameter = idUsuario != null ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_DuracionesProyecto_Result>("USP_DuracionesProyecto", permisoParameter, rolParameter, idUsuarioParameter);
        }
    
        public virtual int USP_CambiarCedulaCliente(string cedulaVieja, string cedulaNueva)
        {
            var cedulaViejaParameter = cedulaVieja != null ?
                new ObjectParameter("cedulaVieja", cedulaVieja) :
                new ObjectParameter("cedulaVieja", typeof(string));
    
            var cedulaNuevaParameter = cedulaNueva != null ?
                new ObjectParameter("cedulaNueva", cedulaNueva) :
                new ObjectParameter("cedulaNueva", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CambiarCedulaCliente", cedulaViejaParameter, cedulaNuevaParameter);
        }
    
        public virtual ObjectResult<USP_FechaInioFinTesterProyecto_Result> USP_FechaInioFinTesterProyecto(string idEmpleadoFK)
        {
            var idEmpleadoFKParameter = idEmpleadoFK != null ?
                new ObjectParameter("idEmpleadoFK", idEmpleadoFK) :
                new ObjectParameter("idEmpleadoFK", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FechaInioFinTesterProyecto_Result>("USP_FechaInioFinTesterProyecto", idEmpleadoFKParameter);
        }
    
        public virtual ObjectResult<USP_FechaInicioFinRequerimiento_Result> USP_FechaInicioFinRequerimiento(Nullable<int> idProyecto, string idEmpleado)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            var idEmpleadoParameter = idEmpleado != null ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FechaInicioFinRequerimiento_Result>("USP_FechaInicioFinRequerimiento", idProyectoParameter, idEmpleadoParameter);
        }
    
        public virtual ObjectResult<USP_ObtenerProyectosUsuario_Result> USP_ObtenerProyectosUsuario(Nullable<int> permiso, Nullable<int> rol, string idUsuario)
        {
            var permisoParameter = permiso.HasValue ?
                new ObjectParameter("permiso", permiso) :
                new ObjectParameter("permiso", typeof(int));
    
            var rolParameter = rol.HasValue ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(int));
    
            var idUsuarioParameter = idUsuario != null ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ObtenerProyectosUsuario_Result>("USP_ObtenerProyectosUsuario", permisoParameter, rolParameter, idUsuarioParameter);
        }
    
        public virtual ObjectResult<USP_CompararReqsProyecto_Result> USP_CompararReqsProyecto(Nullable<int> idProyecto, string idTester, string comp)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            var idTesterParameter = idTester != null ?
                new ObjectParameter("idTester", idTester) :
                new ObjectParameter("idTester", typeof(string));
    
            var compParameter = comp != null ?
                new ObjectParameter("comp", comp) :
                new ObjectParameter("comp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CompararReqsProyecto_Result>("USP_CompararReqsProyecto", idProyectoParameter, idTesterParameter, compParameter);
        }
    
        public virtual ObjectResult<USP_EstadoRequerimientosProyecto_Result> USP_EstadoRequerimientosProyecto(Nullable<int> idProyecto)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_EstadoRequerimientosProyecto_Result>("USP_EstadoRequerimientosProyecto", idProyectoParameter);
        }
    
        public virtual ObjectResult<USP_ObtenerProyectosActivosTerminadosUsuario_Result> USP_ObtenerProyectosActivosTerminadosUsuario(Nullable<int> permiso, Nullable<int> rol, string idUsuario)
        {
            var permisoParameter = permiso.HasValue ?
                new ObjectParameter("permiso", permiso) :
                new ObjectParameter("permiso", typeof(int));
    
            var rolParameter = rol.HasValue ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(int));
    
            var idUsuarioParameter = idUsuario != null ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ObtenerProyectosActivosTerminadosUsuario_Result>("USP_ObtenerProyectosActivosTerminadosUsuario", permisoParameter, rolParameter, idUsuarioParameter);
        }
    
        public virtual ObjectResult<USP_ObtenerRequerimientosProyecto_Result> USP_ObtenerRequerimientosProyecto(Nullable<int> idProyecto)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ObtenerRequerimientosProyecto_Result>("USP_ObtenerRequerimientosProyecto", idProyectoParameter);
        }
    
        public virtual ObjectResult<USP_GetTestersHistorial_Result> USP_GetTestersHistorial(Nullable<int> idProyecto)
        {
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("idProyecto", idProyecto) :
                new ObjectParameter("idProyecto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetTestersHistorial_Result>("USP_GetTestersHistorial", idProyectoParameter);
        }
    
        public virtual ObjectResult<USP_ObtenerPruebasRequerimient_Result> USP_ObtenerPruebasRequerimient(Nullable<int> idProy)
        {
            var idProyParameter = idProy.HasValue ?
                new ObjectParameter("idProy", idProy) :
                new ObjectParameter("idProy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ObtenerPruebasRequerimient_Result>("USP_ObtenerPruebasRequerimient", idProyParameter);
        }
    }
}
